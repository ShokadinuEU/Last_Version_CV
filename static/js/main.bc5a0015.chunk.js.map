{"version":3,"sources":["components/main/TopMenu.js","components/main/LeftName.js","components/main/HeaderText.js","components/main/Header.js","App.js","serviceWorker.js","index.js"],"names":["TopMenu","props","toggleClass","classes","react_default","a","createElement","className","onClick","LeftName","HeaderText","Index","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","currentState","state","toggle","setState","main_TopMenu","main_LeftName","Component","App","Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAuBeA,MApBf,SAAiBC,GAAO,IACdC,EAAyBD,EAAzBC,YAAaC,EAAYF,EAAZE,QACrB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,mBAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EACXK,QAASN,QCFXO,MAVf,WACE,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,sBCJO,SAASG,IACtB,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,SACQH,EAAAC,EAAAC,cAAA,WADR,cAEaF,EAAAC,EAAAC,cAAA,WAFb,WAGUF,EAAAC,EAAAC,cAAA,WAHV,YAIWF,EAAAC,EAAAC,cAAA,WAJX,YAMAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAhB,yBCgBSI,cAtBb,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KAKRC,YAAc,WACZ,IAAMiB,EAAeP,EAAKQ,MAAMC,OAC9BT,EAAKU,SAAS,CAAED,QAASF,KAN3BP,EAAKQ,MAAQ,CACTC,QAAQ,GAHKT,wEAWjB,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiB,EAAD,CAASrB,YAAaa,KAAKb,YAClBC,QAAUY,KAAKK,MAAMC,OAAS,SAAW,WAClDjB,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACI,EAAD,cAjBYe,aCSLC,mLARX,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqB,EAAD,cAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc5a0015.chunk.js","sourcesContent":["import React from 'react'\r\nimport './header.scss'\r\n\r\nfunction TopMenu(props) {\r\n  const { toggleClass, classes } = props\r\n  return (\r\n    <div>\r\n      <div className=\"right-menu\">\r\n          <div className=\"group-1\">\r\n            <div className=\"rectangle\">\r\n              <div className=\"start-project\">start project</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"group\"  >\r\n            <div className={classes}\r\n                 onClick={toggleClass}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TopMenu\r\n","import React from 'react'\r\nimport './header.scss'\r\n\r\nfunction LeftName() {\r\n  return (\r\n    <div>\r\n      <div className=\"left-name\">\r\n        <p className=\"left-name-text\">Timotei Dumitru</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LeftName\r\n","import React from 'react'\r\nimport './header.scss'\r\n\r\nexport default function HeaderText() {\r\n  return (\r\n    <div>\r\n      <div className=\"header-text\">\r\n        Hello,<br />\r\n        i'm Timotei<br />\r\n        a Junior<br />\r\n        Front-End<br />\r\n        Developer\r\n      <span className=\"based-in-london\">based in London</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport TopMenu from './TopMenu'\r\nimport LeftName from './LeftName'\r\nimport HeaderText from './HeaderText'\r\n\r\nclass Index extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n        toggle: false,\r\n    }\r\n  }\r\n  toggleClass = () => {\r\n    const currentState = this.state.toggle;\r\n      this.setState({ toggle: !currentState })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <TopMenu toggleClass={this.toggleClass}\r\n                 classes={ this.state.toggle ? \"path-2\" : \"path-1\" } />\r\n        <LeftName />\r\n        <HeaderText />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Index\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/main/Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}